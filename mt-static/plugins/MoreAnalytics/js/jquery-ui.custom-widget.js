// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery;

  $.widget('ui.maCustomWidget', {
    options: {
      viewAtFirst: false,
      blogId: 0,
      magicToken: '',
      cgiUri: '',
      cancelButton: 'Cancel',
      savedMessage: 'Saved',
      jsonParseErrorMessage: 'Parse Error'
    },
    _create: function() {
      var _this = this;
      this.container = $(this.element);
      this.editor = $(this.element).find('.widget-editor');
      this.template = this.editor.find('.widget-template');
      this["switch"] = $(this.element).find('.widget-switch');
      this.viewer = $(this.element).find('.widget-viewer');
      this.viewport = this.viewer.find('.widget-viewport');
      this.indicator = this.viewer.find('.widget-indicator');
      this.intro = $(this.element).find('.widget-introduction');
      this.error = $(this.element).find('.widget-error');
      this.success = $(this.element).find('.widget-success');
      this["switch"].show();
      this.viewer.show();
      this["switch"].find('.widget-start-edit').click(function() {
        return _this.edit();
      });
      this.closer = this.editor.find('.close');
      this.closer.click(function() {
        return _this.close();
      });
      this.editor.find('.save').click(function() {
        return _this.save();
      });
      this.editor.find('.preview').click(function() {
        return _this.preview();
      });
      this.template.bind('change keyup', function() {
        return _this.dirty(true);
      });
      if (this.options.viewAtFirst) {
        return this.view();
      }
    },
    _ajax: function(action, params, success) {
      var _this = this;
      params.__mode = 'ma_custom_widget';
      params.action = action;
      params.blog_id = this.options.blogId;
      params.magic_token = this.options.magicToken;
      this.error.hide().find('.msg-text').text('');
      this.success.hide().find('.msg-text').text('');
      this.wrap(true);
      return $.post(this.options.cgiUri, params).fail(function(jqXHR) {
        return _this.error.find('.msg-text').text(jqXHR.statusText).show();
      }).done(function(data, jqXHR) {
        var ex;
        try {
          if (typeof data === 'string') {
            data = $.parseJSON(data);
          }
        } catch (_error) {
          ex = _error;
          console.log(data);
          console.log(_this.options.jsonParseErrorMessage);
          _this.error.show().find('.msg-text').text(_this.options.jsonParseErrorMessage);
          return;
        }
        if (data.error != null) {
          return _this.error.show().find('.msg-text').text(data.error);
        } else {
          if ((data.result != null) && (data.result.viewport != null)) {
            _this.viewport.html(data.result.viewport).show();
          }
          if (success != null) {
            return success.call(_this, data.result);
          }
        }
      }).always(function() {
        return _this.wrap(false);
      });
    },
    wrap: function(flag) {
      var $target;
      if (flag === true) {
        $target = this.container;
        this.wrapper = $('<div />').css({
          position: 'absolute',
          opacity: 0.5,
          'background-color': 'white',
          display: 'none',
          'z-index': 9999
        });
        $target.append(this.wrapper);
        return this.wrapper.width($target.width()).height($target.height()).offset($target.offset()).show();
      } else if (this.wrapper != null) {
        return this.wrapper.remove();
      }
    },
    dirty: function(flag) {
      if (flag === true) {
        return this.closer.text(this.closer.attr('data-cancel-label'));
      } else {
        return this.closer.text(this.closer.attr('data-close-label'));
      }
    },
    edit: function() {
      var _this = this;
      return this._ajax('edit', {}, function(result) {
        console.log(result);
        _this.template.val(result.template);
        _this.dirty(false);
        _this["switch"].hide();
        _this.editor.show();
        return _this.intro.hide();
      });
    },
    close: function() {
      this.editor.hide();
      this["switch"].show();
      this.error.hide();
      this.success.hide();
      this.intro.show();
      return this.view();
    },
    view: function() {
      var _this = this;
      this.viewport.hide();
      return this._ajax('view', {}, function() {
        return _this.viewport.show();
      });
    },
    save: function() {
      var _this = this;
      return this._ajax('save', {
        template: this.template.val()
      }, function(result) {
        _this.success.show().find('.msg-text').text(_this.options.savedMessage);
        _this.intro.remove();
        return _this.dirty(false);
      });
    },
    preview: function() {
      var _this = this;
      this.viewport.hide();
      return this._ajax('preview', {
        template: this.template.val()
      }, function() {
        return _this.viewport.show();
      });
    }
  });

}).call(this);
